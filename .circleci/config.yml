version: 2.1

orbs:
  slack: circleci/slack@4.2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build5]
      - run:
          name: Build front-end
          command: |
            npm install
            cd frontend
            npm i
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules, frontend/dist]
          key: frontend-build5

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build2]
      - run:
          name: Back-end build
          command: |
            ls -la
            cd backend
            npm i
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules, backend/dist]
          key: backend-build2

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout 
      # Restore from cache
      - restore_cache:
          keys: [frontend-build5]
      # Your job code here
      - run: 
          name: Run Npm Test
          command: |
            npm install oauth-sign
            ls -la
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build2]
      # Your job code here
      - run: 
          name: Run Npm Test
          command: |
            ls -la
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build5]
      # Your job code here
      - run: npm install oauth-sign; npm install; cd frontend; npm install; npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build2]
      # Your job code here
      - run: npm install; cd backend; npm install; npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run: yum -y install curl; yum -y install tar; yum -y install gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export ID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo "Workflow id: $ID"
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name,Values=backend-$ID" --output text > /tmp/ip
            echo "Found IP: " $(cat /tmp/ip)
            curl -H "Content-Type: text/plain" -H "token: 7f92f427-54ab-40ca-878a-ff9f059d253a" --request PUT --data "$(cat /tmp/ip)" https://api.memstash.io/values/BackendUrl
            echo "[web]" > ./.circleci/ansible/inventory.txt
            cat /tmp/ip >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: ubuntu:latest
    environment:
      ANSIBLE_HOST_KEY_CHECKING: "false"
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["0c:88:ce:b8:35:93:62:74:b6:43:82:ab:ef:53:21:f5"]  
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apt update
            apt -y install python3-pip
            pip3 install ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook .circleci/ansible/configure-server.yml --extra-vars "TYPEORM_CONNECTION=$TYPEORM_CONNECTION TYPEORM_ENTITIES=$TYPEORM_ENTITIES TYPEORM_HOST=$TYPEORM_HOST TYPEORM_PORT=$TYPEORM_PORT TYPEORM_USERNAME=$TYPEORM_USERNAME TYPEORM_PASSWORD=$TYPEORM_PASSWORD TYPEORM_DATABASE=$TYPEORM_DATABASE"

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: node:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:latest
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: ubuntu:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
      - image: ubuntu:latest
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
          #  branches:
          #    only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      #- run-migrations:
      #    requires: [configure-infrastructure]
      #- deploy-frontend:
      #    requires: [run-migrations]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]